// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BotUser {
  id            String         @unique
  name          String
  LoNBookmarks  LoNBookmark[]
  TcGPlayers    TcGPlayer?
  RPGCharacters RPGCharacter[]
}

model LoNChannel {
  id        Int       @id @default(autoincrement())
  channelID String    @unique
  data      LoNData[]
}

model LoNData {
  id          Int        @id @default(autoincrement())
  messageID   String     @unique
  channel     LoNChannel @relation(fields: [channelID], references: [channelID])
  channelID   String
  neededVotes Int
  votes       LoNVotes[]
  picture     LoNImage   @relation(fields: [pictureID], references: [id])
  pictureID   Int
  deleted     Boolean    @default(false)
}

model LoNVotes {
  id     Int     @id @default(autoincrement())
  userID String
  vote   String
  data   LoNData @relation(fields: [dataID], references: [id])
  dataID Int
}

model LoNImage {
  id          Int           @unique
  data        LoNData[]
  tags        String        @db.LongText
  hasChildren Boolean       @default(false)
  file_url    String        @db.LongText
  preview_url String        @db.LongText
  source      String
  rating      String
  bookmarks   LoNBookmark[]
}

model LoNCustomPicture {
  id      Int     @id @default(autoincrement())
  picture String
  done    Boolean
}

model LoNBookmark {
  id        Int      @id @default(autoincrement())
  user      BotUser  @relation(fields: [userID], references: [id])
  userID    String
  picture   LoNImage @relation(fields: [pictureID], references: [id])
  pictureID Int
}

model wolvesvilleInfoChannel {
  id        Int       @id @default(autoincrement())
  channelID String    @unique
  lastSend  DateTime?
}

model TcGPlayer {
  id       Int          @id @default(autoincrement())
  user     BotUser      @relation(fields: [userID], references: [id])
  userID   String       @unique
  money    Int
  cards    TcGCard[]
  cardSets TcGCardSet[]
}

model TcGCard {
  id            String       @id
  ownedBy       TcGPlayer[]
  cardSets      TcGCardSet[]
  name          String
  supertype     String
  subtype       TcGSubtype[]
  types         TcGType[]
  evolvesFrom   TcGCard?     @relation("evolvesTo", fields: [evolvesFromID], references: [id])
  evolvesFromID String?
  evolvesTo     TcGCard[]    @relation("evolvesTo")
}

model TcGSubtype {
  id      Int       @id @default(autoincrement())
  subtype String
  cards   TcGCard[]
}

model TcGType {
  id    Int       @id @default(autoincrement())
  type  String
  cards TcGCard[]
}

model TcGCardSet {
  id       Int       @id @default(autoincrement())
  name     String
  cards    TcGCard[]
  player   TcGPlayer @relation(fields: [playerID], references: [id])
  playerID Int
}

model RPGChannel {
  id           Int    @id @default(autoincrement())
  channelID    String @unique
  webhookId    String
  webhookToken String
}

model RPGMessage {
  id             Int      @id @default(autoincrement())
  content        String   @db.LongText
  username       String
  displayName    String
  profilePicture String
  created_at     DateTime @default(now())
}

model RPGWorld {
  id          Int            @id @default(autoincrement())
  name        String
  description String       @db.LongText
  genre       String
  cities      RPGCity[]
  players     RPGCharacter[]
  current     Boolean        @default(false)
}

model RPGCharacter {
  id          Int       @id @default(autoincrement())
  user        BotUser   @relation(fields: [userID], references: [id])
  userID      String
  name        String
  description String
  health      Int       @default(10)
  maxHealth   Int       @default(10)
  xp          Int       @default(0)
  gold        Int       @default(0)
  world       RPGWorld  @relation(fields: [worldID], references: [id])
  worldID     Int
  dead        Boolean   @default(false)
  inventory   RPGItem[]
}

model RPGItem {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  damage      Int
  cost        Int
  owned       RPGCharacter[]
}

model RPGCity {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  world       RPGWorld @relation(fields: [worldID], references: [id])
  worldID     Int
  npcs        RPGNPC[]
}

model RPGNPC {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  city        RPGCity @relation(fields: [cityID], references: [id])
  cityID      Int
}

model RPGGoal {
  id          Int    @id @default(autoincrement())
  name        String
  description String
}

model RPGauthCode {
  id   Int     @id @default(autoincrement())
  code String
  used Boolean @default(false)
}

model RPGSuperUSer {
  id         Int      @id @default(autoincrement())
  userID     String
  expires_at DateTime
}

model AIUsage {
  id      Int      @id @default(autoincrement())
  input   String   @db.LongText
  output  String   @db.LongText
  created DateTime @default(now())
}
